program politisti_pe_teren;
type lista=^camp;
     camp=record
                inf:longint;
                leg:lista;
          end;
          
var a:array [1..2000] of lista; { sir de pointeri la listele de vecini PNOD L{MAX]}
    t,marc:array [1..2000] of longint;
    s:array [1..2000] of boolean;
    f:text;
    n,m,mai,start,comp,vali:longint;
    
procedure load;
var i,j,k:longint;
    x:lista;
begin
     assign(f,'input.txt');reset(f);
     readln(f,n,m);
     for i:=1 to n do begin
        new(a[i]);
        a[i]^.inf:=i;
        a[i]^.leg:=nil;
                      end;
     for k:=1 to m do begin
        readln(f,i,j);
        new(x);
        x^.inf:=j;
        x^.leg:=a[i]^.leg;
        a[i]^.leg:=x;
        new(x);
        x^.inf:=i;
        x^.leg:=a[j]^.leg;
        a[j]^.leg:=x;
                      end;
     close(f);
end;

procedure set_;
var i:longint;
begin
     for i:=1 to n do
        t[i]:=0;
     for i:=1 to n do
        s[i]:=false;
     for i:=1 to n do
        marc[i]:=0;
     mai:=n;  { nr noduri neselectate }
     start:=1;
     comp:=0;
     vali:=0;
end;

procedure arbore; { BF }
var v:array [1..2000] of longint; { coada }
    k,p,u:longint;
    x:lista;
begin
     k:=start;
     while s[k] do k:=k+1;  { cauta primul nod neselectat }
     start:=k;
     v[1]:=k;
     s[k]:=true;
     p:=1;
     u:=1;
     mai:=mai-1;
     while p<=u do begin
          x:=a[v[p]]^.leg;
          while x<>nil do begin
               if not(s[x^.inf]) then begin
                 u:=u+1;
                 v[u]:=x^.inf;
                 t[x^.inf]:=v[p];
                 s[x^.inf]:=true;
                 mai:=mai-1;
                                      end;
               x:=x^.leg;
                          end;
          p:=p+1;
                   end;
end;

procedure arbori;
begin
     while mai>0 do begin { mai nr noduri neselectate }
          comp:=comp+1;   { nr comp conexe }
          arbore;  { BF }
                    end;
end;

procedure ciclu(p,q:longint);
var l,lng,i,sp:longint;
    d,drum:array [1..2000] of longint;
begin
     sp:=p;
     vali:=vali+1; { nr cicluri elementare }
     l:=0;
     while p<>0 do begin
          l:=l+1;
          d[l]:=p; { d[] - retine drumul c mai scurt de la p la radacina }
          p:=t[p];
          marc[d[l]]:=vali;
                   end;
     lng:=0;
     while q<>0 do begin
          lng:=lng+1;
          drum[lng]:=q; { drum[] - retine drumul c mai scurt de la q la radacina }
          q:=t[q];
          if marc[drum[lng]]=vali then q:=0; { daca drumurile se intalnesc, ne oprim, nu continuam }
                   end;                      { pana in radacina, am gasit un ciclu mai mic }  
     i:=1;
     while d[i]<>drum[lng] do begin    { pana la intersectie, scrie d[i] }
          write(f,d[i],' ');
          i:=i+1;
                              end;
     for i:=lng downto 1 do          { de la intersectie pana in q, scrie drum[i] }
        write(f,drum[i],' ');
     writeln(f,sp);
end;

procedure scrie;
var i:longint;
    x:lista;
begin
     assign(f,'output.txt');rewrite(f);
     writeln(f,m-n+comp);
     for i:=1 to n do begin
        x:=a[i]^.leg;  { primul vecin al nodului i }
        while x<>nil do begin
             if i<x^.inf then { ca sa nu caut ciclu si de la x^.inf la i }
               if not(t[x^.inf]=i) and not(t[i]=x^.inf)  { muchie transversala }
			then ciclu(i,x^.inf);
             x:=x^.leg;
                        end;
                      end;
     close(f);
end;
begin {programul principal}
     load;
     set_;
     arbori;
     scrie;
end.